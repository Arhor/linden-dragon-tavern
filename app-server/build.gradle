plugins {
    id "java-base"
    id "jacoco"
    id "org.jetbrains.kotlin.jvm" apply false
}

ext {
    jacocoExclusions = [
        "**/config/*",
        "**/mapper/*",
        "**/error/*",
        "**/model/*",
        "**/dto/*",
    ].collect { "com/github/arhor/linden/dragon/tavern/$it" }
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"

    group = "com.github.arhor"

    configurations {
        testImplementation {
            exclude module: "junit-vintage-engine"
        }
    }

    java {
        sourceCompatibility = libs.versions.java.get()
        targetCompatibility = libs.versions.java.get()
    }

    check {
        dependsOn jacocoTestReport, jacocoTestCoverageVerification
    }

    jacoco {
        toolVersion = libs.versions.jacoco.get()
    }

    jacocoTestReport {
        dependsOn test

        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: jacocoExclusions
            )
        })
        reports {
            xml.required.set(false)
            csv.required.set(false)
            html.required.set(true)
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.10
                }
            }
        }
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(
                dir: it,
                exclude: jacocoExclusions
            )
        })
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = [
            "-Xlint:unchecked",
            "-Xlint:deprecation",
            "-Xlint:preview",
            "--enable-preview",
        ]
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = [
                "-Xjsr305=strict",
                "-Xjvm-default=all",
                "-Xcontext-receivers",
                "-opt-in=kotlin.RequiresOptIn"
            ]
            jvmTarget = libs.versions.java.get()
            javaParameters = true
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

task jacocoTestReportRoot(type: JacocoReport, group: "verification") {
    description = "Generates aggregate report from all subprojects"

    subprojects.each {
        it.afterEvaluate {
            def subprojectJacocoTestReport = it.tasks.findByName("jacocoTestReport")

            if (subprojectJacocoTestReport != null) {
                dependsOn subprojectJacocoTestReport
            }
        }
    }
    classDirectories.setFrom files([
        fileTree(
            dir: "${project.projectDir}",
            includes: ["**/build/classes/java/**/*.class", "**/build/classes/kotlin/**/*.class"],
            exclude: jacocoExclusions
        )
    ])
    sourceDirectories.setFrom files([
        fileTree(
            dir: "${project.projectDir}",
            includes: ["**/src/main/java/**/*.*", "**/src/main/kotlin/**/*.*"]
        )
    ])
    executionData.setFrom files([
        fileTree(
            dir: "${project.projectDir}",
            includes: ["**/build/jacoco/*.exec"]
        )
    ])
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(file("${project.projectDir}/build/reports/jacoco/root"))
    }
}
